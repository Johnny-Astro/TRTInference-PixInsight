#include <pcl/Console.h>
#include <pcl/Arguments.h>
#include <pcl/View.h>
#include <pcl/Exception.h>

#include "TRTInferenceProcess.h"
#include "TRTInferenceParameters.h"
#include "TRTInferenceInstance.h"
#include "TRTInferenceInterface.h"

namespace pcl
{

TRTInferenceProcess* TheTRTInferenceProcess = nullptr;

TRTInferenceProcess::TRTInferenceProcess()
{
    TheTRTInferenceProcess = this;

    // Instantiate process parameters
    new TRTInferenceTileOverlap(this);
    new TRTInferenceKeepOutputDimension(this);
}

IsoString TRTInferenceProcess::Id() const
{
    return MODULE_ID;
}

IsoString TRTInferenceProcess::Category() const
{
    return "AI";
}

// ----------------------------------------------------------------------------

uint32 TRTInferenceProcess::Version() const
{
    return MODULE_VERSION;
}

// ----------------------------------------------------------------------------

String TRTInferenceProcess::Description() const
{
    return MODULE_DESCRIPTION;
}

// ----------------------------------------------------------------------------

IsoString TRTInferenceProcess::IconImageSVG() const
{
    return
        "<?xml version=\"1.0\" standalone=\"yes\"?>"
        "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\">"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M193 92L193 93L206 93L193 92M184 93L184 94L188 94L184 93z\"/>"
        "<path style=\"fill:#77b901; stroke:none;\" d=\"M188 93.3889C151.972 99.3101 120.133 118.693 104.25 153C70.5011 225.898 131.419 315.297 213 303.778C230.308 301.334 247.77 295.449 262 285.139C333.076 233.642 313.745 117.624 227 96.1389C214.657 93.0817 200.687 91.3037 188 93.3889z\"/>"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M214 93L214 94L217 94L214 93M219 94L219 95L222 95L219 94M174.667 95.3333L175.333 95.6667L174.667 95.3333M224.667 95.3333L225.333 95.6667L224.667 95.3333M170.667 96.3333L171.333 96.6667L170.667 96.3333M228.667 96.3333L229.333 96.6667L228.667 96.3333M167.667 97.3333L168.333 97.6667L167.667 97.3333M164.667 98.3333L165.333 98.6667L164.667 98.3333M45 133L93 133C99.0569 133 106.623 134.923 110 129L49 129C49 123.935 52.9916 113.932 51.6667 110.028C50.5169 106.639 43.8555 105.443 42.3333 109.111C40.6647 113.132 44.1999 115.522 44.8889 119.028C45.7457 123.387 45 128.557 45 133M293 130L293 133L400 133L400 130L293 130M0 133L0 143L25 140L25 163L0 163L0 166L25 166L25 200L86 200L86 196L29 196L29 166L76 166C80.9973 166 89.346 167.907 92 163L29 163L29 136L0 133M309 163L310 167C323.917 167 336.775 168.327 350 169.861C353.618 170.281 356.499 167.687 355.889 164C355.325 160.591 352.089 159.454 349 160.333C336.092 164.009 322.663 163 309 163M300.333 162.667L300.667 163.333L300.333 162.667M99.3333 165.667L99.6667 166.333L99.3333 165.667M301.333 165.667L301.667 166.333L301.333 165.667M98.3333 168.667L98.6667 169.333L98.3333 168.667M302.333 168.667L302.667 169.333L302.333 168.667M303.333 171.667L303.667 172.333L303.333 171.667M97.3333 172.667L97.6667 173.333L97.3333 172.667M96 176L96 179L97 179L96 176M304.333 177.667L304.667 178.333L304.333 177.667z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M111 181L111 187L119 187L119 212L125 212L125 187L133 187L133 181L111 181z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M133 181L133 187L134 187L133 181M242 181C242 190.008 237.362 212.951 249 213L249 212L243 212L242 181z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M243 181L243 212L249 212L249 200C258.047 201.603 255.302 212 266 212L260 198C266.377 195.534 266.714 186.56 260.972 182.861C256.034 179.68 248.618 181 243 181M268 181L268 187L277 187L277 212L282 212L282 187L290 187L290 181L268 181z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M290 181L290 187L291 187L290 181z\"/>"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M305.333 182.667L305.667 183.333L305.333 182.667M95.3333 183.667L95.6667 184.333L95.3333 183.667z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M125 187L125 212L126 212L125 187z\"/>"
        "<path style=\"fill:#77b901; stroke:none;\" d=\"M249 187L249 194L258 194C257.971 187.073 255.299 187 249 187z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M276 187L276 213L283 213L283 187L282 187L282 212L277 212L276 187M137.667 189.333L138.333 189.667L137.667 189.333z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M149 210L136 203L150 203C150 194.253 140.552 181.621 132.5 193.028C123.985 205.091 137.258 216.71 149 210z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M161 197L160 197L160 212L155 212L155 190L162 191C152.28 182.503 152.176 205.726 154.333 210.889C157.726 219.008 161 206.753 161 204L161 197M163.667 189.333L164.333 189.667L163.667 189.333z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M155 190L155 212L160 212C160 208.46 158.168 193.801 164.972 195.056C169.944 195.972 168 208.424 168 212L174 212C174 205.555 176.511 191.633 168 189.5C164.36 188.588 158.922 190.049 155 190z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M183.667 189.333L184.333 189.667L183.667 189.333z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M191 204L177 208C182.038 220.798 204.632 206.539 192.972 199.722C190.246 198.129 186.054 197.873 183 197L183 195C187.78 193.735 192.878 196.39 195 191C190.67 189.763 186.388 188.262 182 190.25C177.844 192.133 176.325 198.28 180.25 201.361C182.917 203.455 187.757 203.387 191 204z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M189.667 189.333L190.333 189.667L189.667 189.333M205.667 189.333L206.333 189.667L205.667 189.333z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M207 189.417C194.385 192.022 197.436 215.762 211 212.583C222.508 209.887 220.365 186.657 207 189.417z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M211.667 189.333L212.333 189.667L211.667 189.333M223 189L223 190L229 190L223 189M232 189L232 190L237 190L232 189M258 189L258 193L259 193L258 189z\"/>"
        "<path style=\"fill:#f7fbf1; stroke:none;\" d=\"M223 190L223 212L229 212L230.333 196.139L239 190L223 190z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M195.333 191.667L195.667 192.333L195.333 191.667z\"/>"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M306 192L306 205L307 205L306 192M94 193L94 204L95 204L94 193M315 196L315 200C335.642 200 356.349 199.254 376.028 202.889C379.925 203.609 383.426 201.253 382.861 197C381.795 188.973 371.244 195.951 367 196C349.672 196.201 332.329 196 315 196z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M138 194L138 195L142 195L138 194M163 194L163 195L166 195L163 194M173.333 194.667L173.667 195.333L173.333 194.667M184 194L184 195L190 195L184 194M207 194L207 195L210 195L207 194M231 194L231 195L234 195L231 194M249 194L249 195L257 195L249 194z\"/>"
        "<path style=\"fill:#77b901; stroke:none;\" d=\"M137 195L137 198L144 198L137 195z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M183.333 195.667L183.667 196.333L183.333 195.667M191.667 195.333L192.333 195.667L191.667 195.333M199.333 195.667L199.667 196.333L199.333 195.667z\"/>"
        "<path style=\"fill:#77b901; stroke:none;\" d=\"M206 195C205.688 196.649 205.236 198.326 205.083 200C203.583 216.462 221.693 195.331 206 195z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M235.667 195.333L236.333 195.667L235.667 195.333M130 196L130 206L131 206L130 196M136 196C136.858 200.005 143.093 200.31 145 197L136 196M167.333 196.667L167.667 197.333L167.333 196.667M205.333 196.667L205.667 197.333L205.333 196.667M218 196L218 205L219 205L218 196M150 197L150 203L151 203L150 197M212 197L212 204L213 204L212 197M188 198L188 199L191 199L188 198M181.667 202.333L182.333 202.667L181.667 202.333M254.333 202.667L254.667 203.333L254.333 202.667M136.333 203.667L136.667 204.333L136.333 203.667M186 203L186 204L189 204L186 203M196 203L196 207L197 207L196 203M199 203L199 206L200 206L199 203M190.333 204.667L190.667 205.333L190.333 204.667M255.333 204.667L255.667 205.333L255.333 204.667M139 207L139 208L143 208L139 207M183 207L183 208L189 208L183 207M207 207L207 208L210 208L207 207M149.333 208.667L149.667 209.333L149.333 208.667z\"/>"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M95.3333 212.667L95.6667 213.333L95.3333 212.667z\"/>"
        "<path style=\"fill:#a6d25a; stroke:none;\" d=\"M119 212L119 213L125 213L119 212M137.667 212.333L138.333 212.667L137.667 212.333M143.667 212.333L144.333 212.667L143.667 212.333M168 212L168 213L174 213L168 212M181 212L181 213L185 213L181 212M189.667 212.333L190.333 212.667L189.667 212.333M205.667 212.333L206.333 212.667L205.667 212.333M223 212L223 213L229 213L223 212M259 212L259 213L266 213L259 212z\"/>"
        "<path style=\"fill:#4f504c; stroke:none;\" d=\"M305.333 212.667L305.667 213.333L305.333 212.667M96.3333 218.667L96.6667 219.333L96.3333 218.667M97 221L97 224L98 224L97 221M0 222L0 267L44 267C44 273.491 45.7105 282.754 43.6667 288.917C42.5448 292.3 37.9417 295.912 41.5 299.667C44.159 302.472 50.1434 300.858 50.6667 296.972C51.1627 293.289 47.7584 291.265 47.1111 287.972C45.8327 281.468 47 273.634 47 267L109 267C106.657 261.048 98.4399 263 93 263L47 263L47 233L92 233C90.045 228.596 84.2618 230 80 230L44 230L44 263L2 263C2 254.112 0.494386 243.73 2.11111 235C2.64206 232.133 4.9515 230.012 4.94444 227C4.93643 223.577 2.94226 222.53 0 222M303.333 222.667L303.667 223.333L303.333 222.667M98.3333 226.667L98.6667 227.333L98.3333 226.667M310 229L310 233L400 233L400 229L310 229M301.333 230.667L301.667 231.333L301.333 230.667M300.333 233.667L300.667 234.333L300.333 233.667M293 267L313 267L327 267C331.122 267.01 333.235 268.664 337 269.667C343.538 271.407 347.183 261.714 340.972 259.5C337.067 258.108 334.543 262.2 331 262.889C322.333 264.574 311.838 263 303 263C298.629 263 293.978 261.852 293 267M164.667 298.333L165.333 298.667L164.667 298.333M167.667 299.333L168.333 299.667L167.667 299.333M170.667 300.333L171.333 300.667L170.667 300.333M228.667 300.333L229.333 300.667L228.667 300.333M174.667 301.333L175.333 301.667L174.667 301.333M224.667 301.333L225.333 301.667L224.667 301.333M219 302L219 303L222 303L219 302M184 303L184 304L188 304L184 303M214 303L214 304L217 304L214 303M193 304L193 305L206 305L193 304z\"/>"
        "</svg>";
}
// ----------------------------------------------------------------------------

ProcessInterface* TRTInferenceProcess::DefaultInterface() const
{
    return TheTRTInferenceInterface;
}
// ----------------------------------------------------------------------------

ProcessImplementation* TRTInferenceProcess::Create() const
{
    return new TRTInferenceInstance(this);
}

// ----------------------------------------------------------------------------

ProcessImplementation* TRTInferenceProcess::Clone(const ProcessImplementation& p) const
{
    const TRTInferenceInstance* instPtr = dynamic_cast<const TRTInferenceInstance*>(&p);
    return (instPtr != 0) ? new TRTInferenceInstance(*instPtr) : 0;
}

// ----------------------------------------------------------------------------

bool TRTInferenceProcess::NeedsValidation() const
{
    return false;
}

// ----------------------------------------------------------------------------

bool TRTInferenceProcess::CanProcessCommandLines() const
{
    return false;
}

}	// namespace pcl